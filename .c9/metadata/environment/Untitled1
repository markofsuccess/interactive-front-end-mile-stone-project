{"changed":true,"filter":false,"title":"Untitled1","tooltip":"/Untitled1","value":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n    <meta charset=\"utf-8\">\n    <title>Places Search Box</title>\n    <style>\n      /* Always set the map height explicitly to define the size of the div\n       * element that contains the map. */\n      #map {\n        height: 100%;\n      }\n      /* Optional: Makes the sample page fill the window. */\n      html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n      #description {\n        font-family: Roboto;\n        font-size: 15px;\n        font-weight: 300;\n      }\n\n      #infowindow-content .title {\n        font-weight: bold;\n      }\n\n      #infowindow-content {\n        display: none;\n      }\n\n      #map #infowindow-content {\n        display: inline;\n      }\n\n      .pac-card {\n        margin: 10px 10px 0 0;\n        border-radius: 2px 0 0 2px;\n        box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        outline: none;\n        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n        background-color: #fff;\n        font-family: Roboto;\n      }\n\n      #pac-container {\n        padding-bottom: 12px;\n        margin-right: 12px;\n      }\n\n      .pac-controls {\n        display: inline-block;\n        padding: 5px 11px;\n      }\n\n      .pac-controls label {\n        font-family: Roboto;\n        font-size: 13px;\n        font-weight: 300;\n      }\n\n      #pac-input {\n        background-color: #fff;\n        font-family: Roboto;\n        font-size: 15px;\n        font-weight: 300;\n        margin-left: 12px;\n        padding: 0 11px 0 13px;\n        text-overflow: ellipsis;\n        width: 400px;\n      }\n\n      #pac-input:focus {\n        border-color: #4d90fe;\n      }\n\n      #title {\n        color: #fff;\n        background-color: #4d90fe;\n        font-size: 25px;\n        font-weight: 500;\n        padding: 6px 12px;\n      }\n      #target {\n        width: 345px;\n      }\n    </style>\n  </head>\n  <body>\n    <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search Box\">\n    <div id=\"map\"></div>\n    <script>\n      // This example adds a search box to a map, using the Google Place Autocomplete\n      // feature. People can enter geographical searches. The search box will return a\n      // pick list containing a mix of places and predicted search terms.\n\n      // This example requires the Places library. Include the libraries=places\n      // parameter when you first load the API. For example:\n      // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n\n      function initAutocomplete() {\n        var map = new google.maps.Map(document.getElementById('map'), {\n          center: {lat: -33.8688, lng: 151.2195},\n          zoom: 13,\n          mapTypeId: 'roadmap'\n        });\n\n        // Create the search box and link it to the UI element.\n        var input = document.getElementById('pac-input');\n        var searchBox = new google.maps.places.SearchBox(input);\n        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n        // Bias the SearchBox results towards current map's viewport.\n        map.addListener('bounds_changed', function() {\n          searchBox.setBounds(map.getBounds());\n        });\n\n        var markers = [];\n        // Listen for the event fired when the user selects a prediction and retrieve\n        // more details for that place.\n        searchBox.addListener('places_changed', function() {\n          var places = searchBox.getPlaces();\n\n          if (places.length == 0) {\n            return;\n          }\n\n          // Clear out the old markers.\n          markers.forEach(function(marker) {\n            marker.setMap(null);\n          });\n          markers = [];\n\n          // For each place, get the icon, name and location.\n          var bounds = new google.maps.LatLngBounds();\n          places.forEach(function(place) {\n            if (!place.geometry) {\n              console.log(\"Returned place contains no geometry\");\n              return;\n            }\n            var icon = {\n              url: place.icon,\n              size: new google.maps.Size(71, 71),\n              origin: new google.maps.Point(0, 0),\n              anchor: new google.maps.Point(17, 34),\n              scaledSize: new google.maps.Size(25, 25)\n            };\n\n            // Create a marker for each place.\n            markers.push(new google.maps.Marker({\n              map: map,\n              icon: icon,\n              title: place.name,\n              position: place.geometry.location\n            }));\n\n            if (place.geometry.viewport) {\n              // Only geocodes have viewport.\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          map.fitBounds(bounds);\n        });\n      }\n\n    </script>\n    <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initAutocomplete\"\n         async defer></script>\n  </body>\n</html>","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":35,"column":45},"action":"insert","lines":["<script>","        function initMap() {","            var map = new google.maps.Map(document.getElementById(\"map\"),{","                zoom: 3,","                center: {","                    lat: 46.619261,","                    lng: -33.134766","                }","            });","        ","        var labels = \"ABCDEFGHIJKLMONPQRSTUVWXYZ\";","            var locations = [{","                lat: 40.785091,","                lng: -73.968285","            }, {","                lat: 41.084045,","                lng: -73.874256","            }, {","                lat: 40.754932,","                lng: -73.984016","            }];","            var markers = locations.map(function(location, i) {","                return new google.maps.Marker({","                    position: location,","                    label: labels[i % labels.length]","                });","            });","            var markerCluster = new MarkerClusterer(map, markers, {","                imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'","            });","        }","        ","    </script>","    <script src=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"></script>","    <script async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDC-NyhAbjic7Vjx_TNkMKEEjFe2rSeDxs&callback=initMap\"></script>","    <script src=\"assets/js/maps.js\"></script>"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":35,"column":45},"action":"remove","lines":["<script>","        function initMap() {","            var map = new google.maps.Map(document.getElementById(\"map\"),{","                zoom: 3,","                center: {","                    lat: 46.619261,","                    lng: -33.134766","                }","            });","        ","        var labels = \"ABCDEFGHIJKLMONPQRSTUVWXYZ\";","            var locations = [{","                lat: 40.785091,","                lng: -73.968285","            }, {","                lat: 41.084045,","                lng: -73.874256","            }, {","                lat: 40.754932,","                lng: -73.984016","            }];","            var markers = locations.map(function(location, i) {","                return new google.maps.Marker({","                    position: location,","                    label: labels[i % labels.length]","                });","            });","            var markerCluster = new MarkerClusterer(map, markers, {","                imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'","            });","        }","        ","    </script>","    <script src=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"></script>","    <script async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDC-NyhAbjic7Vjx_TNkMKEEjFe2rSeDxs&callback=initMap\"></script>","    <script src=\"assets/js/maps.js\"></script>"],"id":2},{"start":{"row":0,"column":0},"end":{"row":173,"column":7},"action":"insert","lines":["<!DOCTYPE html>","<html>","  <head>","    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">","    <meta charset=\"utf-8\">","    <title>Places Search Box</title>","    <style>","      /* Always set the map height explicitly to define the size of the div","       * element that contains the map. */","      #map {","        height: 100%;","      }","      /* Optional: Makes the sample page fill the window. */","      html, body {","        height: 100%;","        margin: 0;","        padding: 0;","      }","      #description {","        font-family: Roboto;","        font-size: 15px;","        font-weight: 300;","      }","","      #infowindow-content .title {","        font-weight: bold;","      }","","      #infowindow-content {","        display: none;","      }","","      #map #infowindow-content {","        display: inline;","      }","","      .pac-card {","        margin: 10px 10px 0 0;","        border-radius: 2px 0 0 2px;","        box-sizing: border-box;","        -moz-box-sizing: border-box;","        outline: none;","        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);","        background-color: #fff;","        font-family: Roboto;","      }","","      #pac-container {","        padding-bottom: 12px;","        margin-right: 12px;","      }","","      .pac-controls {","        display: inline-block;","        padding: 5px 11px;","      }","","      .pac-controls label {","        font-family: Roboto;","        font-size: 13px;","        font-weight: 300;","      }","","      #pac-input {","        background-color: #fff;","        font-family: Roboto;","        font-size: 15px;","        font-weight: 300;","        margin-left: 12px;","        padding: 0 11px 0 13px;","        text-overflow: ellipsis;","        width: 400px;","      }","","      #pac-input:focus {","        border-color: #4d90fe;","      }","","      #title {","        color: #fff;","        background-color: #4d90fe;","        font-size: 25px;","        font-weight: 500;","        padding: 6px 12px;","      }","      #target {","        width: 345px;","      }","    </style>","  </head>","  <body>","    <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search Box\">","    <div id=\"map\"></div>","    <script>","      // This example adds a search box to a map, using the Google Place Autocomplete","      // feature. People can enter geographical searches. The search box will return a","      // pick list containing a mix of places and predicted search terms.","","      // This example requires the Places library. Include the libraries=places","      // parameter when you first load the API. For example:","      // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">","","      function initAutocomplete() {","        var map = new google.maps.Map(document.getElementById('map'), {","          center: {lat: -33.8688, lng: 151.2195},","          zoom: 13,","          mapTypeId: 'roadmap'","        });","","        // Create the search box and link it to the UI element.","        var input = document.getElementById('pac-input');","        var searchBox = new google.maps.places.SearchBox(input);","        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);","","        // Bias the SearchBox results towards current map's viewport.","        map.addListener('bounds_changed', function() {","          searchBox.setBounds(map.getBounds());","        });","","        var markers = [];","        // Listen for the event fired when the user selects a prediction and retrieve","        // more details for that place.","        searchBox.addListener('places_changed', function() {","          var places = searchBox.getPlaces();","","          if (places.length == 0) {","            return;","          }","","          // Clear out the old markers.","          markers.forEach(function(marker) {","            marker.setMap(null);","          });","          markers = [];","","          // For each place, get the icon, name and location.","          var bounds = new google.maps.LatLngBounds();","          places.forEach(function(place) {","            if (!place.geometry) {","              console.log(\"Returned place contains no geometry\");","              return;","            }","            var icon = {","              url: place.icon,","              size: new google.maps.Size(71, 71),","              origin: new google.maps.Point(0, 0),","              anchor: new google.maps.Point(17, 34),","              scaledSize: new google.maps.Size(25, 25)","            };","","            // Create a marker for each place.","            markers.push(new google.maps.Marker({","              map: map,","              icon: icon,","              title: place.name,","              position: place.geometry.location","            }));","","            if (place.geometry.viewport) {","              // Only geocodes have viewport.","              bounds.union(place.geometry.viewport);","            } else {","              bounds.extend(place.geometry.location);","            }","          });","          map.fitBounds(bounds);","        });","      }","","    </script>","    <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initAutocomplete\"","         async defer></script>","  </body>","</html>"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":173,"column":7},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1,"state":"start","mode":"ace/mode/text"}},"timestamp":1561535509848}